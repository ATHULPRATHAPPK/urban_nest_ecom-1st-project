<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Purple Admin</title>
  <!-- plugins:css -->
  <link rel="stylesheet" href="../../admin/assets/vendors/mdi/css/materialdesignicons.min.css">
  <link rel="stylesheet" href="../../admin/assets/vendors/css/vendor.bundle.base.css">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
  <!-- endinject -->
  <!-- Plugin css for this page -->
  <!-- End plugin css for this page -->
  <!-- inject:css -->
  <!-- endinject -->
  <!-- Layout styles -->
  <link rel="stylesheet" href="../../admin/assets/css/style.css">
  <!-- End layout styles -->
  <link rel="shortcut icon" href="../../admin/assets/images/favicon.ico" />
</head>

<body>
  <div class="container-scroller">
    <!-- partial:../../partials/_navbar.html -->
    <nav class="navbar default-layout-navbar col-lg-12 col-12 p-0 fixed-top d-flex flex-row">
      <div class="text-center navbar-brand-wrapper d-flex align-items-center justify-content-center">
        <a class="navbar-brand brand-logo" href="../../index.html"><img src="../../admin/assets/images/logo.svg"
            alt="logo" /></a>
        <a class="navbar-brand brand-logo-mini" href="../../index.html"><img
            src="../../admin/assets/images/logo-mini.svg" alt="logo" /></a>
      </div>
      <div class="navbar-menu-wrapper d-flex align-items-stretch">
        <button class="navbar-toggler navbar-toggler align-self-center" type="button" data-toggle="minimize">
          <span class="mdi mdi-menu"></span>
        </button>
        <div class="search-field d-none d-md-block">
          <form class="d-flex align-items-center h-100" action="#">
            <div class="input-group">
              <div class="input-group-prepend bg-transparent">
                <i class="input-group-text border-0 mdi mdi-magnify"></i>
              </div>
              <input type="text" class="form-control bg-transparent border-0" placeholder="Search projects">
            </div>
          </form>
        </div>
        <ul class="navbar-nav navbar-nav-right">
          <li class="nav-item nav-profile dropdown">
            <a class="nav-link dropdown-toggle" id="profileDropdown" href="#" data-bs-toggle="dropdown"
              aria-expanded="false">
              <div class="nav-profile-img">
                <img src="../../admin/assets/images/faces/face1.jpg" alt="image">
                <span class="availability-status online"></span>
              </div>
              <div class="nav-profile-text">
                <p class="mb-1 text-black">David Greymaax</p>
              </div>
            </a>
            <div class="dropdown-menu navbar-dropdown" aria-labelledby="profileDropdown">
              <a class="dropdown-item" href="#" onclick="showLogoutConfirmation()">
                <i class="mdi mdi-logout me-2 text-primary"></i> Signout
              </a>
            </div>

            <script>
              function showLogoutConfirmation() {
                Swal.fire({
                  title: 'Logout Confirmation',
                  text: 'Are you sure you want to sign out?',
                  icon: 'warning',
                  showCancelButton: true,
                  confirmButtonColor: '#3085d6',
                  cancelButtonColor: '#d33',
                  confirmButtonText: 'Yes, sign out'
                }).then((result) => {
                  if (result.isConfirmed) {
                    // Redirect to the logout URL when the user confirms
                    window.location.href = '/admin-logout';
                  }
                });
              }
            </script>

          </li>
          <li class="nav-item d-none d-lg-block full-screen-link">
            <a class="nav-link">
              <i class="mdi mdi-fullscreen" id="fullscreen-button"></i>
            </a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link count-indicator dropdown-toggle" id="messageDropdown" href="#" data-bs-toggle="dropdown"
              aria-expanded="false">
              <i class="mdi mdi-email-outline"></i>
              <span class="count-symbol bg-warning"></span>
            </a>
            <div class="dropdown-menu dropdown-menu-right navbar-dropdown preview-list"
              aria-labelledby="messageDropdown">
              <h6 class="p-3 mb-0">Messages</h6>
              <div class="dropdown-divider"></div>
              <a class="dropdown-item preview-item">
                <div class="preview-thumbnail">
                  <img src="../../admin/assets/images/faces/face4.jpg" alt="image" class="profile-pic">
                </div>
                <div class="preview-item-content d-flex align-items-start flex-column justify-content-center">
                  <h6 class="preview-subject ellipsis mb-1 font-weight-normal">Mark send you a message</h6>
                  <p class="text-gray mb-0"> 1 Minutes ago </p>
                </div>
              </a>
              <div class="dropdown-divider"></div>
              <a class="dropdown-item preview-item">
                <div class="preview-thumbnail">
                  <img src="../../admin/assets/images/faces/face2.jpg" alt="image" class="profile-pic">
                </div>
                <div class="preview-item-content d-flex align-items-start flex-column justify-content-center">
                  <h6 class="preview-subject ellipsis mb-1 font-weight-normal">Cregh send you a message</h6>
                  <p class="text-gray mb-0"> 15 Minutes ago </p>
                </div>
              </a>
              <div class="dropdown-divider"></div>
              <a class="dropdown-item preview-item">
                <div class="preview-thumbnail">
                  <img src="../../admin/assets/images/faces/face3.jpg" alt="image" class="profile-pic">
                </div>
                <div class="preview-item-content d-flex align-items-start flex-column justify-content-center">
                  <h6 class="preview-subject ellipsis mb-1 font-weight-normal">Profile picture updated</h6>
                  <p class="text-gray mb-0"> 18 Minutes ago </p>
                </div>
              </a>
              <div class="dropdown-divider"></div>
              <h6 class="p-3 mb-0 text-center">4 new messages</h6>
            </div>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link count-indicator dropdown-toggle" id="notificationDropdown" href="#"
              data-bs-toggle="dropdown">
              <i class="mdi mdi-bell-outline"></i>
              <span class="count-symbol bg-danger"></span>
            </a>
            <div class="dropdown-menu dropdown-menu-right navbar-dropdown preview-list"
              aria-labelledby="notificationDropdown">
              <h6 class="p-3 mb-0">Notifications</h6>
              <div class="dropdown-divider"></div>
              <a class="dropdown-item preview-item">
                <div class="preview-thumbnail">
                  <div class="preview-icon bg-success">
                    <i class="mdi mdi-calendar"></i>
                  </div>
                </div>
                <div class="preview-item-content d-flex align-items-start flex-column justify-content-center">
                  <h6 class="preview-subject font-weight-normal mb-1">Event today</h6>
                  <p class="text-gray ellipsis mb-0"> Just a reminder that you have an event today </p>
                </div>
              </a>
              <div class="dropdown-divider"></div>
              <a class="dropdown-item preview-item">
                <div class="preview-thumbnail">
                  <div class="preview-icon bg-warning">
                    <i class="mdi mdi-settings"></i>
                  </div>
                </div>
                <div class="preview-item-content d-flex align-items-start flex-column justify-content-center">
                  <h6 class="preview-subject font-weight-normal mb-1">Settings</h6>
                  <p class="text-gray ellipsis mb-0"> Update dashboard </p>
                </div>
              </a>
              <div class="dropdown-divider"></div>
              <a class="dropdown-item preview-item">
                <div class="preview-thumbnail">
                  <div class="preview-icon bg-info">
                    <i class="mdi mdi-link-variant"></i>
                  </div>
                </div>
                <div class="preview-item-content d-flex align-items-start flex-column justify-content-center">
                  <h6 class="preview-subject font-weight-normal mb-1">Launch Admin</h6>
                  <p class="text-gray ellipsis mb-0"> New admin wow! </p>
                </div>
              </a>
              <div class="dropdown-divider"></div>
              <h6 class="p-3 mb-0 text-center">See all notifications</h6>
            </div>
          </li>
          <li class="nav-item nav-logout d-none d-lg-block">
            <a class="nav-link" href="#">
              <i class="mdi mdi-power"></i>
            </a>
          </li>
          <li class="nav-item nav-settings d-none d-lg-block">
            <a class="nav-link" href="#">
              <i class="mdi mdi-format-line-spacing"></i>
            </a>
          </li>
        </ul>
        <button class="navbar-toggler navbar-toggler-right d-lg-none align-self-center" type="button"
          data-toggle="offcanvas">
          <span class="mdi mdi-menu"></span>
        </button>
      </div>
    </nav>
    <!-- partial -->
    <div class="container-fluid page-body-wrapper">
      <!-- partial:../../partials/_sidebar.html -->
      <nav class="sidebar sidebar-offcanvas" id="sidebar">
        <ul class="nav">
          <li class="nav-item nav-profile">
            <a href="#" class="nav-link">
              <div class="nav-profile-image">
                <img src="../../admin/assets/images/faces/face1.jpg" alt="profile">
                <span class="login-status online"></span>
                <!--change to offline or busy as needed-->
              </div>
              <div class="nav-profile-text d-flex flex-column">
                <span class="font-weight-bold mb-2">David Grey. H</span>
                <span class="text-secondary text-small">Project Manager</span>
              </div>
              <i class="mdi mdi-bookmark-check text-success nav-profile-badge"></i>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/adminhome">
              <span class="menu-title">Dashboard</span>
              <i class="mdi mdi-home menu-icon"></i>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" data-bs-toggle="collapse" href="#ui-basic" aria-expanded="false"
              aria-controls="ui-basic">
              <span class="menu-title">Product</span>
              <i class="menu-arrow"></i>
              <!-- <i class="mdi mdi-crosshairs-gps menu-icon"></i> -->
            </a>
            <div class="collapse" id="ui-basic">
              <ul class="nav flex-column sub-menu">
                <li class="nav-item"> <a class="nav-link" href="/productManagment">Product Managment</a></li>

                <!-- <li class="nav-item"> <a class="nav-link" href="../../pages/ui-features/typography.html">Add Product</a></li> -->
                <!-- --------------------------------------------------------------------------------------------------------------------------------- -->











                <!-- ----------------------------------------------------------------------------------------------------------- -->

              </ul>
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="userdetails">
              <span class="menu-title">Users</span>
              <i class="mdi mdi-contacts menu-icon"></i>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/categoryManagement">
              <span class="menu-title">Category Management</span>
              <i class="mdi mdi-format-list-bulleted menu-icon"></i>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/userOrders">
              <span class="menu-title">User Orders</span>
              <i class="mdi mdi-chart-bar menu-icon"></i>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/coupon">
              <span class="menu-title">Coupn Management</span>
              <i class="mdi mdi-chart-bar menu-icon"></i>
            </a>
          </li>
        </ul>
      </nav>

      <!-- partial -->

      <!-- ---------------------------------------- -->
      <!-- <div class="col-lg-12 grid-margin stretch-card">
          <div class="card">
            <div class="card-body">
              <h4 class="card-title">Product Managment</h4>
             
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th> serial No </th>
                    <th> Product Name </th>
                    <th> Product Category </th>
                    <th> Product image </th>
                    <th> Status </th>
                    <th> Action </th>
                    <th> Edit </th>
                    <th> Delete </th>
                  
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td> 1 </td>
                    <td> Herman Beck </td>
                    <td>
                      <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </td>
                    <td> $ 77.99 </td>
                    <td> May 15, 2015 </td>
                  </tr>
                  <tr>
                    <td> 2 </td>
                    <td> Messsy Adam </td>
                    <td>
                      <div class="progress">
                        <div class="progress-bar bg-danger" role="progressbar" style="width: 75%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </td>
                    <td> $245.30 </td>
                    <td> July 1, 2015 </td>
                  </tr>
                  <tr>
                    <td> 3 </td>
                    <td> John Richards </td>
                    <td>
                      <div class="progress">
                        <div class="progress-bar bg-warning" role="progressbar" style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </td>
                    <td> $138.00 </td>
                    <td> Apr 12, 2015 </td>
                  </tr>
                  <tr>
                    <td> 4 </td>
                    <td> Peter Meggik </td>
                    <td>
                      <div class="progress">
                        <div class="progress-bar bg-primary" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </td>
                    <td> $ 77.99 </td>
                    <td> May 15, 2015 </td>
                  </tr>
                  <tr>
                    <td> 5 </td>
                    <td> Edward </td>
                    <td>
                      <div class="progress">
                        <div class="progress-bar bg-danger" role="progressbar" style="width: 35%" aria-valuenow="35" aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </td>
                    <td> $ 160.25 </td>
                    <td> May 03, 2015 </td>
                  </tr>
                  <tr>
                    <td> 6 </td>
                    <td> John Doe </td>
                    <td>
                      <div class="progress">
                        <div class="progress-bar bg-info" role="progressbar" style="width: 65%" aria-valuenow="65" aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </td>
                    <td> $ 123.21 </td>
                    <td> April 05, 2015 </td>
                  </tr>
                  <tr>
                    <td> 7 </td>
                    <td> Henry Tom </td>
                    <td>
                      <div class="progress">
                        <div class="progress-bar bg-warning" role="progressbar" style="width: 20%" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"></div>
                      </div>
                    </td>
                    <td> $ 150.00 </td>
                    <td> June 16, 2015 </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div> -->
      <!--  ------------------------------------------------->
      <div class="container">
        <div class="col-lg-12 mt-3">
          <div class="card">
            <div class="card-body">
                <div class="container mt-5">
                    <h2 class="mb-4">Sales Report</h2>
                
                    <form id="generateReportForm" class="row" onsubmit="return validateAndSubmitForm()">
                        <div class="form-group col-md-4">
                            <label for="start-date">Start Date:</label>
                            <input type="date" class="form-control" id="start-date" name="start-date" required>
                        </div>
                    
                        <div class="form-group col-md-4">
                            <label for="end-date">End Date:</label>
                            <input type="date" class="form-control" id="end-date" name="end-date" required>
                        </div>
                    
                        <div class="form-group col-md-4 d-flex flex-column mt-auto">
                            <button type="submit" id="generateReportBtn" class="btn btn-primary btn-block">Generate Report</button>
                        </div>
                    </form>
                    
                
                    <br>
                    <div id="flash-message" style="width: 70%;" class="col-md-12 mt-3"></div>
                </div>

             
    <hr>
    <h3 class="mb-4">Monthly Sales Report</h3>
    <div class="form-group col-md-4 d-flex flex-column mt-auto">
        <button type="button" id="generateMonthly" class="btn btn-primary btn-block">Generate Report</button>
    </div>
    <br>
    <hr>
    <h3 class="mb-4">Weekly Sales Report</h3>
    <div class="form-group col-md-4 d-flex flex-column mt-auto">
        <button type="button" id="generateWeekly" class="btn btn-primary btn-block">Generate Report</button>
    </div>
    <hr>
    

    <div id="reportPreview" style="display:none;">
        <h6>Sales Report Preview</h6>
        <table class="table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Name</th>
                    <th>Date</th>
                    <th>Quantity</th>
                    <th>total</th>
                   
                    <!-- <th>Address</th> -->
                    <!-- Add more columns if needed -->
                </tr>
            </thead>
            <tbody id="reportContentTableBody"></tbody>
        </table>
        <p>Total Orders: <span id="totalOrders"></span></p>
        <p>Total Amount:  <span id="totalAmount"></span></p>
        <button type="button" id="downloadReportBtn" class="btn btn-success">Download Report</button>
    </div>

    <br><br>
    <div id="reportMonthly" style="display:none;">
        <h6>Monthly Sales Report Preview</h6>
        <table class="table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Name</th>
                    <th>Date</th>
                    <th>Quantity</th>
                    <th>total</th>
                   
                    <!-- <th>Address</th> -->
                    <!-- Add more columns if needed -->
                </tr>
            </thead>
            <tbody id="reportContentMonthlyTable"></tbody>
        </table>
        <p>Total Orders: <span id="totalOrders1"></span></p>
        <p>Total Amount:  <span id="totalAmount1"></span></p>
        <button type="button" id="downloadReportBtn1" class="btn btn-success">Download Report</button>
    </div>
    <br><br>


    <div id="reportWeekly" style="display:none;">
        <h6>weekly Sales Report Preview</h6>
        <table class="table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Name</th>
                    <th>Date</th>
                    <th>Quantity</th>
                    <th>total</th>
                   
                    <!-- <th>Address</th> -->
                    <!-- Add more columns if needed -->
                </tr>
            </thead>
            <tbody id="reportContentWeeklyTable"></tbody>
        </table>
        <p>Total Orders: <span id="totalOrders2"></span></p>
        <p>Total Amount:  <span id="totalAmount2"></span></p>
        <button type="button" id="downloadReportBtn2" class="btn btn-success">Download Report</button>
    </div>

</div>

<br>
<br><br><br>





<script>
    let ordersDataDownload;

    // Event listener for the "Generate Monthly Sales Report" button
    document.getElementById('generateMonthly').addEventListener('click', function() {
        // Show SweetAlert confirmation dialog
        Swal.fire({
            icon: 'question',
            title: 'Generate Monthly Sales Report',
            text: 'Do you want to generate the monthly sales report?',
            showCancelButton: true,
            confirmButtonText: 'Yes',
            cancelButtonText: 'No'
        }).then((result) => {
            // If user confirms, send fetch request to backend
            if (result.isConfirmed) {
                fetch('/generateMonthlyReport', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    // You can include any data you need to send to the backend here
                    body: JSON.stringify({})
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Handle response data if needed
                    ordersDataDownload = data;
                    console.log("productItem",   data);
                    displayReportTable1(data.orders);
                    document.getElementById('reportMonthly').style.display = 'block';
                    // Optionally show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Monthly sales report generated successfully',
                        confirmButtonText: 'OK'
                    });
                })
                .catch(error => {
                    console.error('Error generating monthly sales report:', error);
                    // Optionally show error message
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while generating the monthly sales report',
                        confirmButtonText: 'OK'
                    });
                });
            }
        });
    });
    document.getElementById('downloadReportBtn1').addEventListener('click', async () => {
        // Download the report as an Excel file
        const content = document.getElementById('reportContentMonthlyTable').innerHTML;
        downloadExcel(ordersDataDownload);
    });
    // Function to display the report table
    function displayReportTable1(updatedOrders) {
        console.log('Data received: updatedOrders',updatedOrders);

        const tableBody = document.getElementById('reportContentMonthlyTable');
        const totalOrdersElement = document.getElementById('totalOrders1');
        const totalAmountElement = document.getElementById('totalAmount1');

        tableBody.innerHTML = ''; // Clear previous content
        let totalOrders = 0;
        let totalAmount = 0;

        updatedOrders.forEach(order => {
            const { address, date, product, subTotal } = order;
          
            product.forEach(productItem => {
                const { _id, name, quantity, total } = productItem;

                const row = `<tr>
                                <td>${_id}</td>
                                <td>${name}</td>
                                <td>${new Date(date).toLocaleDateString()}</td>
                                <td>${quantity}</td>
                                <td>${total}</td>
                                <!-- <td>${address.city}, ${address.state}, ${address.pincode}</td> -->
                                <!-- Add more columns if needed -->
                            </tr>`;
                tableBody.innerHTML += row;
                totalOrders++;
                totalAmount += total;
            });
        });

        totalOrdersElement.textContent = totalOrders;
        totalAmountElement.textContent = totalAmount.toFixed(2); // Assuming total is a decimal value
    }

    // Function to download the Excel file
    function downloadExcel(data) {
        try {
            const { orders, startDate, endDate } = data;

            const ws = XLSX.utils.json_to_sheet(orders);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'SalesReport');

            const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
            const blob = new Blob([wbout], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = `sales_report_${startDate}_to_${endDate}.xlsx`;

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } catch (error) {
            console.error('Error downloading Excel:', error);
        }
    }

    // Event listener for the "Generate Report" button (assuming you have one with id 'generateReportBtn')
    document.getElementById('generateMonthly').addEventListener('click', async () => {
        console.log('Generate Report button clicked');
        // You can add functionality for generating reports here
    });

    // Event listener for the "Download Report" button (assuming you have one with id 'downloadReportBtn')
    document.getElementById('downloadReportBtn1').addEventListener('click', async () => {
        console.log('Download Report button clicked');
        // You can add functionality for downloading reports here
    });



    let ordersDataDownload1;

    document.getElementById('generateReportBtn').addEventListener('click', async () => {
        const userStartDate = document.getElementById('start-date').value;
        const userEndDate = document.getElementById('end-date').value;
    
        try {
            const response = await fetch('/generateReport', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 'start-date': userStartDate, 'end-date': userEndDate })
            });
    
            console.log(response);
    
            if (response.ok) {
                const data = await response.json();
                const { orders, startDate, endDate } = data;
                ordersDataDownload1 = data;
    
                // Display the report content as a table
                displayReportTable(orders);
    
                // Show the report preview
                document.getElementById('reportPreview').style.display = 'block';
            } else {
                // Handle error responses here
                console.error('Error:', response.status, response.statusText);
            }
        } catch (error) {
            // Handle network or parsing errors
            console.error('Error:', error.message);
        }
    });
    
    // Programmatically handle form submission
    document.getElementById('generateReportForm').addEventListener('submit', (event) => {
        event.preventDefault(); // Prevent the default form submission
        validateAndSubmitForm();
    });
    
    function validateAndSubmitForm() {
        if (validateDates()) {
            // If validation passes, trigger the click event on the button
            document.getElementById('generateReportBtn').click();
        }
    }
    
    function validateDates() {
        var startDate = document.getElementById('start-date').value;
        var endDate = document.getElementById('end-date').value;
        var flashMessageContainer = document.getElementById('flash-message');
    
        // Clear previous flash messages
        flashMessageContainer.innerHTML = '';
    
        if (startDate && endDate) {
            if (startDate > endDate) {
                // Create a div element for the flash message
                var flashMessage = document.createElement('div');
                flashMessage.className = 'alert alert-danger';
                flashMessage.textContent = 'Invalid date input: Start Date should not be after End Date';
    
                // Append the flash message to the container
                flashMessageContainer.appendChild(flashMessage);
    
                return false; // Prevent form submission
            }
        }
    
        return true; // Allow form submission
    }
    

    document.getElementById('downloadReportBtn').addEventListener('click', async () => {
        // Download the report as an Excel file
        const content = document.getElementById('reportContentTableBody').innerHTML;
        downloadExcel(ordersDataDownload);
    });
    function displayReportTable(updatedOrders) {
    console.log('Data received: updatedOrders');

    const tableBody = document.getElementById('reportContentTableBody');
    const totalOrdersElement = document.getElementById('totalOrders');
    const totalAmountElement = document.getElementById('totalAmount');

    tableBody.innerHTML = ''; // Clear previous content
    let totalOrders = 0;
    let totalAmount = 0;

    updatedOrders.forEach(order => {
        const { address, date, product, subTotal } = order;

        product.forEach(productItem => {
            const { _id, name, quantity, total } = productItem;

            const row = `<tr>
                            <td>${_id}</td>
                            <td>${name}</td>
                            <td>${new Date(date).toLocaleDateString()}</td>
                            <td>${quantity}</td>
                            <td>${total}</td>
                            <!-- <td>${address.city}, ${address.state}, ${address.pincode}</td> -->
                            <!-- Add more columns if needed -->
                        </tr>`;
            tableBody.innerHTML += row;
            totalOrders++;
            totalAmount += total;
        });
    });

    totalOrdersElement.textContent = totalOrders;
    totalAmountElement.textContent = totalAmount.toFixed(2); // Assuming total is a decimal value
}



    function downloadExcel(data) {
        try {
            const { orders, startDate, endDate } = data;
           

    
            const ws = XLSX.utils.json_to_sheet(orders);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'SalesReport');
    
            const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
            const blob = new Blob([wbout], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = `sales_report_${startDate}_to_${endDate}.xlsx`;
    
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } catch (error) {
            console.error('Error downloading Excel:', error);
        }
    }
    document.getElementById('generateReportBtn').addEventListener('click', async () => {
        console.log('Generate Report button clicked');
        // ... rest of your code
    });
    
    document.getElementById('downloadReportBtn').addEventListener('click', async () => {
        console.log('Download Report button clicked');
        // ... rest of your code
    });
    

    


//weekly

let ordersDataDownload2;

// Event listener for the "Generate Monthly Sales Report" button
document.getElementById('generateWeekly').addEventListener('click', function() {
    console.log("called this");
    // Show SweetAlert confirmation dialog
    Swal.fire({
        icon: 'question',
        title: 'Generate Monthly Sales Report',
        text: 'Do you want to generate the monthly sales report?',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
    }).then((result) => {
        // If user confirms, send fetch request to backend
        if (result.isConfirmed) {
            fetch('/generateWeeklyReport', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                // You can include any data you need to send to the backend here
                body: JSON.stringify({})
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Handle response data if needed
                ordersDataDownload2 = data;
                console.log("productItem",   data);
                displayReportTable2(data.orders);
                document.getElementById('reportWeekly').style.display = 'block';
                // Optionally show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'weekly sales report generated successfully',
                    confirmButtonText: 'OK'
                });
            })
            .catch(error => {
                console.error('Error generating monthly sales report:', error);
                // Optionally show error message
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while generating the monthly sales report',
                    confirmButtonText: 'OK'
                });
            });
        }
    });
});
document.getElementById('downloadReportBtn2').addEventListener('click', async () => {
    // Download the report as an Excel file
    const content = document.getElementById('reportContentWeeklyTable').innerHTML;
    downloadExcel(ordersDataDownload2);
});
// Function to display the report table
function displayReportTable2(updatedOrders) {
    console.log('Data received: updatedOrders',updatedOrders);

    const tableBody = document.getElementById('reportContentWeeklyTable');
    const totalOrdersElement = document.getElementById('totalOrders2');
    const totalAmountElement = document.getElementById('totalAmount2');

    tableBody.innerHTML = ''; // Clear previous content
    let totalOrders = 0;
    let totalAmount = 0;

    updatedOrders.forEach(order => {
        const { address, date, product, subTotal } = order;
      
        product.forEach(productItem => {
            const { _id, name, quantity, total } = productItem;

            const row = `<tr>
                            <td>${_id}</td>
                            <td>${name}</td>
                            <td>${new Date(date).toLocaleDateString()}</td>
                            <td>${quantity}</td>
                            <td>${total}</td>
                            <!-- <td>${address.city}, ${address.state}, ${address.pincode}</td> -->
                            <!-- Add more columns if needed -->
                        </tr>`;
            tableBody.innerHTML += row;
            totalOrders++;
            totalAmount += total;
        });
    });

    totalOrdersElement.textContent = totalOrders;
    totalAmountElement.textContent = totalAmount.toFixed(2); // Assuming total is a decimal value
}

// Function to download the Excel file
function downloadExcel(data) {
    try {
        const { orders, startDate, endDate } = data;

        const ws = XLSX.utils.json_to_sheet(orders);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'SalesReport');

        const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
        const blob = new Blob([wbout], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = `sales_report_${startDate}_to_${endDate}.xlsx`;

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error('Error downloading Excel:', error);
    }
}

// Event listener for the "Generate Report" button (assuming you have one with id 'generateReportBtn')
document.getElementById('generateWeekly').addEventListener('click', async () => {
    console.log('Generate Report button clicked 2');
    // You can add functionality for generating reports here
});

// Event listener for the "Download Report" button (assuming you have one with id 'downloadReportBtn')
document.getElementById('downloadReportBtn2').addEventListener('click', async () => {
    console.log('Download Report button clicked');
    // You can add functionality for downloading reports here
});








    
    
</script>




            </div>
          </div>
        </div>

      </div>

    </div>

    <!-- main-panel ends -->

  </div>
  <!-- page-body-wrapper ends -->
  </div>
  <!-- container-scroller -->
  <!-- plugins:js -->
  <!-- Include SweetAlert library -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- Add this script below SweetAlert library inclusion -->
  <script>
    function showAlert(title, text, icon, confirmButtonText, confirmAction) {
      Swal.fire({
        title: title,
        text: text,
        icon: icon,
        confirmButtonText: confirmButtonText,
      }).then((result) => {
        if (result.isConfirmed) {
          // If the user clicks the Confirm button, perform the specified action
          confirmAction();
        }
      });
    }
  </script>

<script src="https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

  <script src="../../admin/assets/vendors/js/vendor.bundle.base.js"></script>
  <!-- endinject -->
  <!-- Plugin js for this page -->
  <!-- End plugin js for this page -->
  <!-- inject:js -->
  <script src="../../admin/assets/js/off-canvas.js"></script>
  <script src="../../admin/assets/js/hoverable-collapse.js"></script>
  <script src="../../admin/assets/js/misc.js"></script>
  <!-- endinject -->
  <!-- Custom js for this page -->
  <!-- End custom js for this page -->
</body>

</html>